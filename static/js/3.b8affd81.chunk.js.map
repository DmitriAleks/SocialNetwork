{"version":3,"sources":["Components/Profile/Profile.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/Profileinfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","value","autoFocus","onChange","e","currentTarget","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","name","component","Input","type","Textarea","Contact","contactTitle","contactValue","className","s","contact","ProfileData","profile","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","Object","keys","map","key","ProfileInfo","updateStatusProfile","updatePhoto","saveProfile","formData","a","console","log","content","avatar","photos","large","src","userPhoto","descriptionBlock","target","files","length","initialValues","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","MyPostsRedux","validate","required","MyPosts","React","memo","postElements","profilePage","posts","post","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","dispatch","newPost","addPostActionCreator","Profile","style","test","ProfileContainer","userId","this","match","params","getUserProfile","getStatusProfile","refreshProfile","prevProps","prevState","snapshot","updatePhotoProfile","saveProfileTC","Component","compose","authorizedUsedId","isAuth","auth","withRouter"],"mappings":"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","file":"static/js/3.b8affd81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Profile_test__2o6k7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2me8y\",\"avatar\":\"ProfileInfo_avatar__1mEvj\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2aNdV\",\"contact\":\"ProfileInfo_contact__3UpAq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2C356\",\"posts\":\"MyPosts_posts__37A6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__38ti7\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [status, setStatus] = useState<string>(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n\r\n            <div>\r\n              <b>Status:</b>  <span onDoubleClick={activateMode}>{status === '' ? 'noy status' : status} </span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input onBlur={deActivateEditMode} value={status} autoFocus={true} onChange={onStatusChange}/>\r\n            </div>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport {Input, Textarea} from \"../../common/FormControls/FormsControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nexport type ProfileDataFormType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\n//34\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType>> = ({handleSubmit}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save\r\n                </button>\r\n            </div>\r\n            <b>Full name</b>: <Field placeholder={'fullName'} name={'fullName'}\r\n                                     component={Input}/>\r\n            <div>\r\n                <b>Looking for a job </b>: <Field placeholder={'lookingForAJob'} name={'lookingForAJob'}\r\n                                                  component={Input} type={'checkbox'}/>\r\n            </div>\r\n            <div>\r\n                <b>My professional skills </b>: <Field placeholder={'lookingForAJobDescription'}\r\n                                                       name={'lookingForAJobDescription'}\r\n                                                       component={Textarea}/>\r\n            </div>\r\n            <div>\r\n                <b>About me </b>: <Field placeholder={'aboutMe'}\r\n                                         name={'aboutMe'}\r\n                                         component={Textarea}/>\r\n            </div>\r\n            {/*<div>*/}\r\n            {/*    {profile.contacts &&*/}\r\n            {/*    <div>*/}\r\n            {/*        <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {*/}\r\n            {/*        return <Contact key={key} contactTitle={key} contactValue={key}/>*/}\r\n            {/*    })}*/}\r\n            {/*    </div>*/}\r\n            {/*    }*/}\r\n            {/*</div>*/}\r\n        </form>\r\n    )\r\n\r\n}\r\n//@ts-ignore\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEventHandler, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileContactUserType, ProfileUserType} from \"../../../redux/profile-reducer\";\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm, {ProfileDataFormType} from \"./ProfileDataForm\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (e: any) => void\r\n    saveProfile: (profile: ProfileDataFormType) => void\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({\r\n                                                    profile,\r\n                                                    status,\r\n                                                    updateStatusProfile,\r\n                                                    isOwner,\r\n                                                    updatePhoto,\r\n                                                    saveProfile\r\n                                                }) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = async (formData: ProfileDataFormType) => {\r\n        await saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n    console.log(profile.contacts)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.avatar}>\r\n                {profile.photos && profile.photos.large\r\n                ? <img src={profile.photos.large}/>\r\n                : <img src={userPhoto}/>}\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                {editMode ? <ProfileDataFormReduxForm onSubmit={onSubmit} initialValues={profile}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>\r\n                }\r\n            </div>\r\n            <div>{profile.fullName}</div>\r\n            <ProfileStatusWithHooks status={status} updateStatusProfile={updateStatusProfile}/>\r\n        </div>\r\n    )\r\n}\r\ntype ContactType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\ntype ProFileDataType = {\r\n    profile: ProfileUserType,\r\n    isOwner: boolean,\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProFileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name </b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job </b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills </b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me </b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                {profile.contacts &&\r\n                <div>\r\n                    <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={key}/>\r\n                })}\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n                <div className={s.item}>\r\n                    <img src={props.avatar} />\r\n                    {props.message}\r\n                    <div>\r\n                        <span>\r\n                            like  {props.likesCount}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\nimport  {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from '../../common/FormControls/FormsControls';\r\n\r\n\r\nlet maxLength10= maxLengthCreator(10)\r\ntype FormDataType ={\r\n    newPostText:string\r\n}\r\nconst AddNewPostForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostText'} placeholder={'add post'}\r\n                       validate={[required,maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MyPostsRedux = reduxForm<FormDataType>({form:'myPosts'})(AddNewPostForm)\r\n\r\n\r\n\r\n\r\n\r\n const MyPosts = React.memo((props: MyPostPropsType) => {\r\n    // shouldComponentUpdate(nextProps: Readonly<MyPostPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n    //     return nextProps != this.props  || nextState !=this.state\r\n    // }//функция которая сравнивает приходящие пропсы, при возвращение фолс не перерисовывает компонету, для классовых компонет\r\n    let postElements = props.profilePage.posts.map(post => <Post key={post.id} id={post.id} message={post.message}\r\n                                                                 likesCount={post.likesCount} avatar={post.avatar}/>)\r\n\r\n\r\n    const addPost = (values:FormDataType) => {\r\n        console.log(values);\r\n        props.addPost(values.newPostText);\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostsRedux onSubmit={addPost}/>\r\n            <div className={s.post}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts\r\n","import React from 'react';\r\nimport {addPostActionCreator, InitialStateType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType= {\r\n    addPost:(newPost:string)=>void\r\n}\r\nexport type MyPostPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToPropsType=>{\r\n    return{\r\n        profilePage:state.profilePage\r\n}}\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType=>{\r\n    return{\r\n        addPost:(newPost)=>{\r\n            dispatch(addPostActionCreator(newPost));\r\n        }\r\n    }}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport style from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/Profileinfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileUserType, updateStatusProfile} from \"../../redux/profile-reducer\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (e: any) => void\r\n    saveProfile: (profile: ProfileDataFormType) => void\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div className={style.test}>\r\n            <ProfileInfo isOwner={props.isOwner} saveProfile={props.saveProfile} updatePhoto={props.updatePhoto}\r\n                         profile={props.profile} status={props.status} updateStatusProfile={props.updateStatusProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusProfile,\r\n    updateStatusProfile,\r\n    getUserProfile,\r\n    ProfileUserType,\r\n    updatePhotoProfile, saveProfileTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileUserType,\r\n    status: string,\r\n    authorizedUsedId: number,\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatusProfile: (userId: string) => void\r\n    updateStatusProfile: (status: string) => void\r\n    updatePhotoProfile: (e: any) => void\r\n    saveProfileTC: (profile: ProfileDataFormType) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: any; ////////\r\n}\r\nexport type PropsType = RouteComponentProps<PathParamsType> & UsersProfilePropsType\r\nexport type UsersProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        // if(!userId) {\r\n        //     this.props.history.push('/login');\r\n        //     userId = this.props.authorizedUsedId;\r\n        //     if(!userId) {\r\n        //         this.props.history.push('/login');\r\n        //     }\r\n        // }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatusProfile(userId);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Profile isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusProfile={this.props.updateStatusProfile}\r\n                     updatePhoto={this.props.updatePhotoProfile}\r\n                     saveProfile={this.props.saveProfileTC}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUsedId: state.profilePage.profile.userId,\r\n    isAuth: state.auth.isAuth,\r\n\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatusProfile,\r\n        updateStatusProfile,\r\n        updatePhotoProfile,\r\n        saveProfileTC\r\n    }),\r\n    withRouter,\r\n    // withAuthRedirect,\r\n)(ProfileContainer)"],"sourceRoot":""}