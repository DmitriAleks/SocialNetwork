{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirectComponent.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","to","id","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","btn","Dialogs","state","dialogPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","style","container","content","messagesBlock","dialogsItems","values","sendMessage","newMessageBody","mapStateToProps","auth","compose","Component","connect","restProps","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,cAAgB,+BAA+B,SAAW,0BAA0B,QAAU,2B,6FCczPC,EATI,SAACC,GAChB,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,cAAC,IAAD,CAASC,GAAI,YAAcJ,EAAMK,GAAjC,SAAsCL,EAAMM,UCIzCC,EARC,SAACP,GACb,OACI,qBAAKC,UAAWC,IAAEM,QAAlB,SACKR,EAAMQ,W,2DCCfC,EAAcC,YAAiB,KAiBtBC,EAAsBC,YAA+B,CAACC,KAAM,wBAAtCD,EAhBsC,SAACZ,GACtE,OACI,uBAAMc,SAAUd,EAAMe,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAC1CH,KAAM,iBAAkBe,YAAY,yBAE/C,8BACI,wBAAQpB,UAAWqB,IAAIA,IAAvB,0BC8BDC,EAvCC,SAACvB,GACb,IAAIwB,EAAQxB,EAAMyB,WACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYvB,KAAMuB,EAAEvB,KAAiBD,GAAIwB,EAAExB,IAAZwB,EAAExB,OAC1EyB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASxB,QAASwB,EAAExB,QAAoBH,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAOnF,OAAKL,EAAMiC,OAGP,qBAAKhC,UAAWiC,IAAMC,UAAtB,SAEI,sBAAKlC,UAAWiC,IAAME,QAAtB,UAEI,sBAAKnC,UAAWiC,IAAMG,cAAtB,UAEI,sBAAMpC,UAAWiC,IAAMI,aAAvB,SACCZ,IAED,qBAAKzB,UAAWiC,IAAMH,SAAtB,SAEI,8BAAOD,SAMf,cAACnB,EAAD,CAAqBG,SAxBb,SAACyB,GACjBvC,EAAMwC,YAAYD,EAAOE,wBAGH,cAAC,IAAD,CAAUrC,GAAI,Y,+BCPtCsC,EAAkB,SAAClB,GACrB,MAAO,CACHS,OAAQT,EAAMmB,KAAKV,SCoBZW,uBDhBR,SAA6BC,GAUhC,OAFiCC,YAAQJ,EAARI,EANP,SAAC9C,GAAgC,IAClDiC,EAAwBjC,EAAxBiC,OAAWc,EADsC,YACzB/C,EADyB,YAEtD,OAAKiC,EACE,cAACY,EAAD,eAAgBE,IADH,cAAC,IAAD,CAAU3C,GAAI,gBCcrC0C,aAnBiB,SAACtB,GACnB,MAAO,CACHC,WAAYD,EAAMC,WAClBQ,OAAQT,EAAMmB,KAAKV,WAGF,SAACe,GACtB,MAAO,CAEHR,YAAa,SAACC,GACVO,EAASC,YAAmBR,SAOzBG,CAGbrB","file":"static/js/4.cb4e3006.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2L-vc\",\"content\":\"Dialogs_content__2NbCr\",\"dialogsItems\":\"Dialogs_dialogsItems__1OXY2\",\"dialog\":\"Dialogs_dialog__2vn4p\",\"messagesBlock\":\"Dialogs_messagesBlock__2h310\",\"messages\":\"Dialogs_messages__25l4V\",\"message\":\"Dialogs_message__1o67z\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport btn from './../../../assets/styles/ButtonStyle.module.css'\r\n\r\nexport type FormDataDialogsType = {\r\n    newMessageBody: string,\r\n}\r\nlet maxLength100= maxLengthCreator(100)\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataDialogsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength100]}\r\n                       name={'newMessageBody'} placeholder='Enter your message'/>\r\n            </div>\r\n            <div>\r\n                <button className={btn.btn}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataDialogsType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AddMessageFormRedux, FormDataDialogsType} from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogPage\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\r\n\r\n\r\n    let addNewMessage = (values: FormDataDialogsType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n\r\n    return (\r\n        <div className={style.container}>\r\n\r\n            <div className={style.content}>\r\n\r\n                <div className={style.messagesBlock}>\r\n\r\n                    <span className={style.dialogsItems}>\r\n                    {dialogsElements}\r\n                </span>\r\n                    <div className={style.messages}>\r\n\r\n                        <div >{messagesElements}\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Dialogs;\r\n","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PropsType} from \"../Components/Profile/ProfileContainer\";\r\nimport {DialogsPropsType} from \"../Components/Dialogs/DialogsContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <Component  {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React from \"react\";\r\nimport {InitialStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirectComponent\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: InitialStateType,\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody:string) => void,\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect\r\n    ,connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);"],"sourceRoot":""}